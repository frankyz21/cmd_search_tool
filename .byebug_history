c
clear
JSON.parse(last_response.body)
c
n
c
expect(JSON.parse(last_response.body)).to eq({"John Doe"=>{"count"=>3, "records"=>[{"id"=>1, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}, {"id"=>2, "full_name"=>"John Doe", "email"=>"jane.smith@yahoo.com"}, {"id"=>6, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}]}})
JSON.parse(last_response.body)
c
expect(JSON.parse(last_response.body)).to eq({"john.doe@gmail.com"=>{"count"=>2, "records"=>[{"id"=>1, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}, {"id"=>6, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}]}, "jane.smith@yahoo.com"=>{"count"=>2, "records"=>[{"id"=>2, "full_name"=>"John Doe", "email"=>"jane.smith@yahoo.com"}, {"id"=>15, "full_name"=>"Another Jane Smith", "email"=>"jane.smith@yahoo.com"}]}})
JSON.parse(last_response.body)
c
JSON.parse(last_response.body)
JSON.parse(last_response.body
last_response
n
matching_clients
n
client[field] == ('full_name')
s
n
s
c
n
c
matching_clients
n
query
c
field
s
n
field
s
n
field
s
n
field
s
n
field
s
n
matches
n
field
s
n
field
s
n
matches
n
field
s
client[field]
field
n
matches
s
matches
s
client[field].to_s.downcase.include?(query[field].downcase)
query[field]
client[field]
field
s
c
s
query.keys
field
s
query
c
JSON.parse(last_response.body)
last_response.body
last_response
c
JSON.parse(last_response.body)
last_response.body
c
JSON.parse(last_response.body)
last_response.body
c
JSON.parse(last_response.body)
last_response.body
c
expect(JSON.parse(last_response.body)).to eq({"John Doe"=>{"count"=>3, "records"=>[{"id"=>1, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}, {"id"=>2, "full_name"=>"John Doe", "email"=>"jane.smith@yahoo.com"}, {"id"=>6, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}]}})
expect(JSON.parse(last_response.body)).to eq("{"John Doe"=>{"count"=>3, "records"=>[{"id"=>1, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}, {"id"=>2, "full_name"=>"John Doe", "email"=>"jane.smith@yahoo.com"}, {"id"=>6, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}]}}")
JSON.parse(last_response.body)
last_response.body
c
JSON.parse(last_response.body)
last_response.body
c
expect(JSON.parse(last_response.body)).to_eq({"john.doe@gmail.com, John Doe"=>{"count"=>2, "records"=>[{"id"=>1, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}, {"id"=>6, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}]}})
expect(JSON.parse(last_response.body)).to_eq("{"john.doe@gmail.com, John Doe"=>{"count"=>2, "records"=>[{"id"=>1, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}, {"id"=>6, "full_name"=>"John Doe", "email"=>"john.doe@gmail.com"}]}}")
JSON.parse(last_response.body)
last_response.body
c
last_response.body
c
last_response.body
c
last_response.body
c
JSON.parse(last_response.body)
JSON.parse(last_response.body).to_json
JSON.parse(last_response.body)
last_response.body.to_json
last_response.body
last_response
JSON.parse(last_response.to_a
JSON.parse(last_response.to_S)
JSON.parse(last_response)
last_response.to_json
last_response
c
duplicate_clients[:records]
duplicate_clients
s
c
puts "#{field_values_arr} (#{duplicate_clients[:count]})"
puts "#{field_values_arr.set()} (#{duplicate_clients[:count]})"
field_values_arr << field_values
field_values
field_values_arr
s
n
s
c
field_values[count]
field_values[:count]
field_values.count
field_values
s
n
field_values
n
duplicate_clients[:count]
puts "#{field_values_arr} (#{duplicate_clients[:count]})"
n
field_values
s
duplicate_values
c
field_values_arr
n
field_values_arr
count[:count]
count[:records]
count[records]
count[1]
count.records
count
field_values
s
c
duplicate_values.first[1].first
duplicate_values.first[1][0]
duplicate_values.first[1]
duplicate_values.first[1].records
duplicate_values.first[1]
duplicate_values.first[0].records
duplicate_values.first[0]
duplicate_values.first.records
duplicate_values.first
duplicate_values.fisrt
duplicate_values.[0]
duplicate_values.first
duplicate_values
duplicate_values[0]
duplicate_values[0].records
duplicate_values.[0].records
duplicate_values.count
duplicate_values
c
duplicate_values
c
duplicate_values
c
n
c
fields.map { |field| client[field] }[0]
n
field_values = fields.map { |field| client[field] }[0]
n
fields
field
field_values_count
field_values_count[field_values] += 1
n
field_values = fields.map { |field| client[field] }[0]
client[field]
s
fields
c
matching_clients
c
n
matching_clients
c
matching_clients == []
c
matching_clients == []
matching_clients.nil?
matching_clients
c
fields
n
c
ARGV[1..-1]
fields = (["email"] || ARGV[1..-1])
c
fields = (["email"] || ARGV[1..-1])
fields
n
c
fields
n
c
ARGV[1..] || "email"
fields = ARGV[1..] || "email" ARGV[1..] || "email"
fields = ARGV[1..] || "email"
fields = ARGV[1..-1] || "email"
fields = ARGV[1..] || ["email"]
fields = ARGV[1..-1] || ["email"]
ARGV[1..-1]
ARGV[0] == 'duplicates'
c
field_values_count
n
fields = fields.flatten
n
fields
n
c
duplicate_values
n
fields = ARGV[0]
n
 ARGV[0] == 'duplicates'
c
ARGV[0]
fields = ARGV[1..-1] || ["email"]
ARGV
c
matching_clients==[]
matching_clients
matching_clients.nil?
c
n
s
n
exit
